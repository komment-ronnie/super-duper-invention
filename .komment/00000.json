[
  {
    "name": "test.java",
    "path": "test.java",
    "content": {
      "structured": {
        "description": "An IIR filter class with a constructor that takes an integer parameter 'order' and initializes the filter coefficients and history buffers accordingly. The setCoeffs() method takes double arrays 'aCoeffs' and 'bCoeffs' as input and sets the corresponding filter coefficients. The process() method takes a single input sample and processes it through the filter using a recurrent feedback loop, returning the filtered output.",
        "items": [
          {
            "id": "1a0ecf01-2a8a-b09c-9f4e-952ac57ff090",
            "ancestors": [],
            "description": "Is designed to process audio signals using a cascade of two filters, with the first filter having a feedback loop and the second filter being a low-pass filter. The class has a constructor that takes an integer parameter representing the order of the filters, and methods for setting the coefficients of the filters and processing audio samples. The `process()` method processes an audio sample by applying the two filters in sequence, using the feedback loop to store the previous output values and apply them to the next filter stage.",
            "name": "IIRFilter",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 67,
            "docLength": null
          },
          {
            "id": "38d5d32d-53ca-e581-7e43-668e9ccd725b",
            "ancestors": [
              "1a0ecf01-2a8a-b09c-9f4e-952ac57ff090"
            ],
            "description": "Sets coefficients for a polynomial of order at most `order`. It checks the lengths of input arrays `aCoeffs` and `bCoeffs`, and ensures that all non-zero elements in `aCoeffs` are not equal to zero. The function then assigns the values of `aCoeffs` and `bCoeffs` to corresponding coefficients in an array `coeffsA`.",
            "params": [
              {
                "name": "aCoeffs",
                "type_name": "double[]",
                "description": "1D array of coefficients for the polynomial used in the multiplication operation.\n\n* Length: `aCoeffs.length` must be equal to `order`.\n* Non-zero value: The first element of `aCoeffs`, `aCoeffs.get(0)`, cannot be zero.",
                "complex_type": true
              },
              {
                "name": "bCoeffs",
                "type_name": "double[]",
                "description": "2nd polynomial's coefficients, which must have the same length as the `aCoeffs` parameter and be non-zero.\n\n* Length: `bCoeffs.length` must equal to the order `order`.\n* All elements of `bCoeffs` must have a non-zero value.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void exampleUsage() {\n        IIRFilter filter = new IIRFilter(3);\n        double[] aCoeffs = { 1, 2, -4 };\n        double[] bCoeffs = { 0.5, 1, -2 };\n        filter.setCoeffs(aCoeffs, bCoeffs);\n    }\n",
              "description": "\nIn this example usage of the setCoeffs method, aCoeffs and bCoeffs are both inputs of type double[]. The first input, aCoeffs, is an array with length 3. Each element within the array corresponds to the coefficients in the numerator of the transfer function that represents the filter. In this case, the numerator coefficients are {1, 2, -4}. The second input, bCoeffs, is also an array with length 3. Each element within the array corresponds to the coefficients in the denominator of the transfer function that represents the filter. In this case, the denominator coefficients are {0.5, 1, -2}. These coefficients will be used to calculate the IIR filter's output given its input."
            },
            "name": "setCoeffs",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 18,
            "docLength": null
          },
          {
            "id": "ad9c46af-9dc9-249f-8446-7970ec0cc44d",
            "ancestors": [
              "1a0ecf01-2a8a-b09c-9f4e-952ac57ff090"
            ],
            "description": "Takes a input `sample` and performs a sequence of calculations using coefficients, previous history values, and feedback loops to produce an output value.",
            "params": [
              {
                "name": "sample",
                "type_name": "double",
                "description": "initial value of the system's state that is processed by the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "double",
              "description": "a calculated value representing the current state of the system.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class Test {\n    public static void main(String[] args) {\n        IIRFilter filter = new IIRFilter(3);\n        double sample = 10.0;\n        double result = filter.process(sample);\n        System.out.println(\"Result: \" + result);\n    }\n}\n",
              "description": ""
            },
            "name": "process",
            "location": {
              "start": 49,
              "insert": 49,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          }
        ]
      }
    }
  }
]