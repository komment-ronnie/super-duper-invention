[
  {
    "name": "test.java",
    "path": "test.java",
    "content": {
      "structured": {
        "description": "An IIR filter, which is a type of digital filter that uses past input values to filter new ones. The `IIRFilter` class has several constructors and methods for setting coefficients and filtering signals. The `process()` method takes a single sample as input, processes it through the filter using a set of coefficients, and then feeds back the output to the input.",
        "items": [
          {
            "id": "29902d81-7170-fca4-9149-3a6572c6b111",
            "ancestors": [],
            "description": "Processes audio signals using a IIR filter structure. It takes in an integer parameter representing the filter's order and allows for setting the coefficients A and B through separate methods. The process method applies the filter to a given sample, feeding back the output to the input, and returns the processed result.",
            "name": "IIRFilter",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 67,
            "docLength": null
          },
          {
            "id": "afe3c397-058f-7588-cd4e-3d564b1058d3",
            "ancestors": [
              "29902d81-7170-fca4-9149-3a6572c6b111"
            ],
            "description": "Sets the coefficients for a polynomial transformation between two arrays of doubles, verifying their lengths and values before updating the internal coefficients array.",
            "params": [
              {
                "name": "aCoeffs",
                "type_name": "double[]",
                "description": "1st polynomial coefficients to be multiplied with the other polynomial `bCoeffs`.\n\n* Length: `aCoeffs.length` must be equal to `order`, which is a constant in the function.\n* Non-zero value at index 0: The element at index 0 of `aCoeffs` cannot be zero.",
                "complex_type": true
              },
              {
                "name": "bCoeffs",
                "type_name": "double[]",
                "description": "2nd polynomial's coefficients, which must have the same length as the `aCoeffs` array and be non-zero.\n\n* `bCoeffs` is a double array of length `order`.\n* The values in `bCoeffs` must be non-zero.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "IIRFilter myIIRFilter = new IIRFilter(4);\n    double[] aCoeffs = {0.5, 0.2, -0.3, -0.1};\n    double[] bCoeffs = {1.0, 0.5, 0.2, -0.1};\n    myIIRFilter.setCoeffs(aCoeffs, bCoeffs);\n",
              "description": "\nThe input array 'aCoeffs' has four elements and the input array 'bCoeffs' has four elements. The first element of both arrays is 1.0, which is the coefficient for the output at time t, and the other elements are coefficients for the history of the signal x[n-k], where k is an integer greater than or equal to one, as well as the feedback terms x[n-1] and y[n-1].\n"
            },
            "name": "setCoeffs",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 18,
            "docLength": null
          },
          {
            "id": "a6d14a5b-77a8-158d-3d4a-3c751005d1e3",
            "ancestors": [
              "29902d81-7170-fca4-9149-3a6572c6b111"
            ],
            "description": "Processes a given input `sample` using a recurrent neural network (RNN) architecture, computing the output based on previous inputs and coefficients.",
            "params": [
              {
                "name": "sample",
                "type_name": "double",
                "description": "initial value of the system being modeled, which is fed into the feedback loop and influenced by the processing done in the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "double",
              "description": "a double value representing the result of the recursive calculation.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public class IIRFilterTest {\n        @Test\n        public void testProcess() {\n            // Given\n            double sample = 1.0;\n            IIRFilter filter = new IIRFilter(3);\n            filter.setCoeffs(new double[] {0.5, 0.25, -0.125}, new double[] {0.75, 0.4375, 0.25});\n\n            // When\n            double result = filter.process(sample);\n\n            // Then\n            assertEquals(result, 1.1875, 0.0001);\n        }\n    }\n",
              "description": "\nThis example uses a sample of `1.0` and tests that the result from processing this input is approximately equal to `1.1875`."
            },
            "name": "process",
            "location": {
              "start": 49,
              "insert": 49,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          }
        ]
      }
    }
  }
]