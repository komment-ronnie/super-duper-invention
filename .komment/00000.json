[
  {
    "name": "test.java",
    "path": "test.java",
    "content": {
      "structured": {
        "description": "An IIR filter class with a constructor that takes an integer parameter representing the order of the filters and methods for setting the coefficients of the filters and processing audio samples. The `process()` method applies two filters in sequence using feedback loops to store previous output values and apply them to the next filter stage, and returns the calculated value representing the current state of the system.",
        "diagram": {
          "path": "test.java",
          "gviz": "",
          "d2": "<?xml version=\"1.0\" encoding=\"utf-8\"?><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" d2Version=\"v0.6.5\" preserveAspectRatio=\"xMinYMin meet\" viewBox=\"0 0 405 368\"><svg id=\"d2-svg\" class=\"d2-1111860978\" width=\"405\" height=\"368\" viewBox=\"11 11 405 368\"><rect x=\"11.000000\" y=\"11.000000\" width=\"405.000000\" height=\"368.000000\" rx=\"0.000000\" fill=\"#151719\" stroke-width=\"0\" /><style type=\"text/css\"><![CDATA[\n.d2-1111860978 .text {\n\tfont-family: \"d2-1111860978-font-regular\";\n}\n@font-face {\n\tfont-family: d2-1111860978-font-regular;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}\n.d2-1111860978 .text-bold {\n\tfont-family: \"d2-1111860978-font-bold\";\n}\n@font-face {\n\tfont-family: d2-1111860978-font-bold;\n\tsrc: url(\"data:application/font-woff;base64,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\");\n}]]></style><style type=\"text/css\"><![CDATA[.shape {\n  shape-rendering: geometricPrecision;\n  stroke-linejoin: round;\n}\n.connection {\n  stroke-linecap: round;\n  stroke-linejoin: round;\n}\n.blend {\n  mix-blend-mode: multiply;\n  opacity: 0.5;\n}\n\n\t\t.d2-1111860978 .fill-N1{fill:#ECEDED;}\n\t\t.d2-1111860978 .fill-N2{fill:#676C7E;}\n\t\t.d2-1111860978 .fill-N3{fill:#9499AB;}\n\t\t.d2-1111860978 .fill-N4{fill:#CFD2DD;}\n\t\t.d2-1111860978 .fill-N5{fill:#DEE1EB;}\n\t\t.d2-1111860978 .fill-N6{fill:#EEF1F8;}\n\t\t.d2-1111860978 .fill-N7{fill:#151719;}\n\t\t.d2-1111860978 .fill-B1{fill:#717D86;}\n\t\t.d2-1111860978 .fill-B2{fill:#717D86;}\n\t\t.d2-1111860978 .fill-B3{fill:#ffff00;}\n\t\t.d2-1111860978 .fill-B4{fill:#151719;}\n\t\t.d2-1111860978 .fill-B5{fill:#151719;}\n\t\t.d2-1111860978 .fill-B6{fill:#151719;}\n\t\t.d2-1111860978 .fill-AA2{fill:#ECEDED;}\n\t\t.d2-1111860978 .fill-AA4{fill:#CFD2DD;}\n\t\t.d2-1111860978 .fill-AA5{fill:#DEE1EB;}\n\t\t.d2-1111860978 .fill-AB4{fill:#CFD2DD;}\n\t\t.d2-1111860978 .fill-AB5{fill:#DEE1EB;}\n\t\t.d2-1111860978 .stroke-N1{stroke:#ECEDED;}\n\t\t.d2-1111860978 .stroke-N2{stroke:#676C7E;}\n\t\t.d2-1111860978 .stroke-N3{stroke:#9499AB;}\n\t\t.d2-1111860978 .stroke-N4{stroke:#CFD2DD;}\n\t\t.d2-1111860978 .stroke-N5{stroke:#DEE1EB;}\n\t\t.d2-1111860978 .stroke-N6{stroke:#EEF1F8;}\n\t\t.d2-1111860978 .stroke-N7{stroke:#151719;}\n\t\t.d2-1111860978 .stroke-B1{stroke:#717D86;}\n\t\t.d2-1111860978 .stroke-B2{stroke:#717D86;}\n\t\t.d2-1111860978 .stroke-B3{stroke:#ffff00;}\n\t\t.d2-1111860978 .stroke-B4{stroke:#151719;}\n\t\t.d2-1111860978 .stroke-B5{stroke:#151719;}\n\t\t.d2-1111860978 .stroke-B6{stroke:#151719;}\n\t\t.d2-1111860978 .stroke-AA2{stroke:#ECEDED;}\n\t\t.d2-1111860978 .stroke-AA4{stroke:#CFD2DD;}\n\t\t.d2-1111860978 .stroke-AA5{stroke:#DEE1EB;}\n\t\t.d2-1111860978 .stroke-AB4{stroke:#CFD2DD;}\n\t\t.d2-1111860978 .stroke-AB5{stroke:#DEE1EB;}\n\t\t.d2-1111860978 .background-color-N1{background-color:#ECEDED;}\n\t\t.d2-1111860978 .background-color-N2{background-color:#676C7E;}\n\t\t.d2-1111860978 .background-color-N3{background-color:#9499AB;}\n\t\t.d2-1111860978 .background-color-N4{background-color:#CFD2DD;}\n\t\t.d2-1111860978 .background-color-N5{background-color:#DEE1EB;}\n\t\t.d2-1111860978 .background-color-N6{background-color:#EEF1F8;}\n\t\t.d2-1111860978 .background-color-N7{background-color:#151719;}\n\t\t.d2-1111860978 .background-color-B1{background-color:#717D86;}\n\t\t.d2-1111860978 .background-color-B2{background-color:#717D86;}\n\t\t.d2-1111860978 .background-color-B3{background-color:#ffff00;}\n\t\t.d2-1111860978 .background-color-B4{background-color:#151719;}\n\t\t.d2-1111860978 .background-color-B5{background-color:#151719;}\n\t\t.d2-1111860978 .background-color-B6{background-color:#151719;}\n\t\t.d2-1111860978 .background-color-AA2{background-color:#ECEDED;}\n\t\t.d2-1111860978 .background-color-AA4{background-color:#CFD2DD;}\n\t\t.d2-1111860978 .background-color-AA5{background-color:#DEE1EB;}\n\t\t.d2-1111860978 .background-color-AB4{background-color:#CFD2DD;}\n\t\t.d2-1111860978 .background-color-AB5{background-color:#DEE1EB;}\n\t\t.d2-1111860978 .color-N1{color:#ECEDED;}\n\t\t.d2-1111860978 .color-N2{color:#676C7E;}\n\t\t.d2-1111860978 .color-N3{color:#9499AB;}\n\t\t.d2-1111860978 .color-N4{color:#CFD2DD;}\n\t\t.d2-1111860978 .color-N5{color:#DEE1EB;}\n\t\t.d2-1111860978 .color-N6{color:#EEF1F8;}\n\t\t.d2-1111860978 .color-N7{color:#151719;}\n\t\t.d2-1111860978 .color-B1{color:#717D86;}\n\t\t.d2-1111860978 .color-B2{color:#717D86;}\n\t\t.d2-1111860978 .color-B3{color:#ffff00;}\n\t\t.d2-1111860978 .color-B4{color:#151719;}\n\t\t.d2-1111860978 .color-B5{color:#151719;}\n\t\t.d2-1111860978 .color-B6{color:#151719;}\n\t\t.d2-1111860978 .color-AA2{color:#ECEDED;}\n\t\t.d2-1111860978 .color-AA4{color:#CFD2DD;}\n\t\t.d2-1111860978 .color-AA5{color:#DEE1EB;}\n\t\t.d2-1111860978 .color-AB4{color:#CFD2DD;}\n\t\t.d2-1111860978 .color-AB5{color:#DEE1EB;}.appendix text.text{fill:#ECEDED}.md{--color-fg-default:#ECEDED;--color-fg-muted:#676C7E;--color-fg-subtle:#9499AB;--color-canvas-default:#151719;--color-canvas-subtle:#EEF1F8;--color-border-default:#717D86;--color-border-muted:#717D86;--color-neutral-muted:#EEF1F8;--color-accent-fg:#717D86;--color-accent-emphasis:#717D86;--color-attention-subtle:#676C7E;--color-danger-fg:red;}.sketch-overlay-B1{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-B3{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-B4{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B5{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-B6{fill:url(#streaks-darker);mix-blend-mode:lighten}.sketch-overlay-AA2{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AA4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AA5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-AB4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-AB5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N1{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N2{fill:url(#streaks-dark);mix-blend-mode:overlay}.sketch-overlay-N3{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N4{fill:url(#streaks-normal);mix-blend-mode:color-burn}.sketch-overlay-N5{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N6{fill:url(#streaks-bright);mix-blend-mode:darken}.sketch-overlay-N7{fill:url(#streaks-darker);mix-blend-mode:lighten}.light-code{display: block}.dark-code{display: none}]]></style><g id=\"com\"><g class=\"shape\" ><rect x=\"12.000000\" y=\"12.000000\" width=\"403.000000\" height=\"366.000000\" class=\" stroke-B1 fill-B4\" style=\"stroke-width:2;\" /></g><text x=\"213.500000\" y=\"45.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:28px\">com</text></g><g id=\"com.thealgorithms\"><g class=\"shape\" ><rect x=\"62.000000\" y=\"62.000000\" width=\"303.000000\" height=\"266.000000\" class=\" stroke-B1 fill-B5\" style=\"stroke-width:2;\" /></g><text x=\"213.500000\" y=\"91.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:24px\">thealgorithms</text></g><g id=\"com.thealgorithms.audiofilters\"><g class=\"shape\" ><rect x=\"112.000000\" y=\"112.000000\" width=\"203.000000\" height=\"166.000000\" class=\" stroke-B1 fill-B6\" style=\"stroke-width:2;\" /></g><text x=\"213.500000\" y=\"137.000000\" class=\"text fill-N1\" style=\"text-anchor:middle;font-size:20px\">audiofilters</text></g><g id=\"com.thealgorithms.audiofilters.IIRFilter\"><g class=\"shape\" ><rect x=\"162.000000\" y=\"162.000000\" width=\"103.000000\" height=\"66.000000\" fill=\"#26de81\" class=\" stroke-B1\" style=\"stroke-width:0;\" /></g><text x=\"213.500000\" y=\"200.500000\" fill=\"#151719\" class=\"text-bold\" style=\"text-anchor:middle;font-size:16px\">IIRFilter</text></g><mask id=\"d2-1111860978\" maskUnits=\"userSpaceOnUse\" x=\"11\" y=\"11\" width=\"405\" height=\"368\">\n<rect x=\"11\" y=\"11\" width=\"405\" height=\"368\" fill=\"white\"></rect>\n<rect x=\"189.000000\" y=\"17.000000\" width=\"49\" height=\"36\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"142.500000\" y=\"67.000000\" width=\"142\" height=\"31\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"166.000000\" y=\"117.000000\" width=\"95\" height=\"26\" fill=\"rgba(0,0,0,0.75)\"></rect>\n<rect x=\"184.500000\" y=\"184.500000\" width=\"58\" height=\"21\" fill=\"rgba(0,0,0,0.75)\"></rect>\n</mask></svg></svg>\n",
          "d2_src": "direction: down\n\nvars: {\n  d2-config: {\n    pad: 0\n    theme-overrides: {\n      B1: \"#717D86\"\n      B2: \"#717D86\"\n      B3: \"#ffff00\"\n      B4: \"#151719\"\n      B5: \"#151719\"\n      B6: \"#151719\"\n      N1: \"#ECEDED\"\n      N7: \"#151719\"\n      AA2: \"#ECEDED\"\n    }\n  }\n}\n\nstyle: {\n  fill: \"#151719\"\n}\ncom.thealgorithms.audiofilters.IIRFilter: {\n  style: {\n    fill: \"#26de81\"\n    font-color: \"#151719\"\n    stroke-width: 0\n  }\n}\n"
        },
        "items": [
          {
            "id": "d88bb0f6-c5bb-b8af-a149-199338a7a2c2",
            "ancestors": [],
            "description": "Is designed to perform a sequence of calculations using coefficients and previous history values to produce an output value. It takes in a sample value and processes it through the given coefficients, history values, and feedback loops to generate a calculated value representing the current state of the system. The class provides methods for setting coefficients and processing samples.",
            "name": "IIRFilter",
            "location": {
              "start": 12,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 2,
                "end": 11
              }
            },
            "item_type": "class",
            "length": 93,
            "docLength": 9
          },
          {
            "id": "0234f8c7-c712-2b82-0340-489a38d1c2d7",
            "ancestors": [
              "d88bb0f6-c5bb-b8af-a149-199338a7a2c2"
            ],
            "description": "Sets the coefficients for a polynomial multiplication operation, verifying the input sizes and ranges, and assigning them to corresponding arrays.",
            "params": [
              {
                "name": "aCoeffs",
                "type_name": "double[]",
                "description": "0th to `order-1st` coefficients of the polynomial, which are used to initialize the `coeffsA` array.\n\n* `aCoeffs.length`: Must be equal to `order`.\n* `aCoeffs[0]`: Must not be zero.",
                "complex_type": true
              },
              {
                "name": "bCoeffs",
                "type_name": "double[]",
                "description": "2nd polynomial coefficients to be multiplied with the first polynomial's coefficients.\n\n* Length: `bCoeffs.length` must equal to `order`, which is a parameter passed to the function.\n* Values: The values of `bCoeffs` must be non-zero and non-negative.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n        int order = 2;\n        IIRFilter filter = new IIRFilter(order);\n        \n        // Define the coefficients for the polynomials\n        double[] aCoeffs = {1.0, -2.0};\n        double[] bCoeffs = {3.0, 4.0};\n        \n        // Set the coefficients for the filters\n        filter.setCoeffs(aCoeffs, bCoeffs);\n        \n        // Process an audio sample\n        double sample = 1.0;\n        double result = filter.process(sample);\n    }\n",
              "description": "\nIn this example, we create a IIRFilter with order 2 and define the coefficients for the polynomials as `aCoeffs` and `bCoeffs`. We then set the coefficients for the filters using the method `setCoeffs()`. Finally, we process an audio sample using the `process()` method and store the result in a variable called `result`."
            },
            "name": "setCoeffs",
            "location": {
              "start": 56,
              "insert": 38,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 37,
                "end": 55
              }
            },
            "item_type": "method",
            "length": 18,
            "docLength": 18
          },
          {
            "id": "109e32c8-0279-4990-9645-cda217f3691d",
            "ancestors": [
              "d88bb0f6-c5bb-b8af-a149-199338a7a2c2"
            ],
            "description": "Takes a sample value and processes it through a recurrent neural network (RNN) with an order of `order`, computing the output value based on previous input values stored in `historyX` and `historyY`. The function then feeds back the output value to the beginning of the RNN chain, updating the input values.",
            "params": [
              {
                "name": "sample",
                "type_name": "double",
                "description": "input value that is processed by the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "double",
              "description": "a double value representing the processed sample.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n        IIRFilter filter = new IIRFilter(5);\n        double sample = 1;\n        double result = filter.process(sample);\n        System.out.println(result);\n    }\n}\n",
              "description": "\nThis is an example of how the `IIRFilter` class would be used. The first argument passed to the constructor is a number representing the order of the filters, which must be greater than zero. This means that the class will have two filters with a total order of 5 (first and second). The method takes in a `sample` as a double and returns the result of processing that sample through both filters. In this example we create an instance of the filter with an order of 5, and then process a sample input of 1.0. This would output the value that has gone through the first two filters (the last value in the `historyX` array)."
            },
            "name": "process",
            "location": {
              "start": 84,
              "insert": 76,
              "offset": " ",
              "indent": 4,
              "comment": {
                "start": 75,
                "end": 83
              }
            },
            "item_type": "method",
            "length": 20,
            "docLength": 8
          }
        ]
      }
    }
  }
]