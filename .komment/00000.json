[
  {
    "name": "test.java",
    "path": "test.java",
    "content": {
      "structured": {
        "description": "An IIR filter class with various parameters such as order, coeffsA and coeffsB which are used for filtering. The class has a constructor, setCoeffs method, and process method. The process method takes in a sample value and applies the filter using a feedback loop to produce an output value.",
        "items": [
          {
            "id": "e787c5af-5e74-c7af-4b42-df7518d72e7b",
            "ancestors": [],
            "description": "Is a filtering mechanism that takes in a sample value and processes it through a series of coefficients, producing an output value. The class has several methods for setting the coefficients and processing samples, with the `process()` method being the primary method for filtering input values.",
            "name": "IIRFilter",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 67,
            "docLength": null
          },
          {
            "id": "426ae2e1-8200-51b4-6844-3ef27635d475",
            "ancestors": [
              "e787c5af-5e74-c7af-4b42-df7518d72e7b"
            ],
            "description": "Sets the coefficients of a and b to those passed in, checks if they are correct lengths, and then assigns them to the corresponding array indices.",
            "params": [
              {
                "name": "aCoeffs",
                "type_name": "double[]",
                "description": "1st polynomial coefficients to be multiplied with the input signal.\n\n* Length: `aCoeffs.length == order`, where `order` is a positive integer indicating the degree of the polynomial.\n* Non-zero value at index 0: `aCoeffs[0] != 0.0`.",
                "complex_type": true
              },
              {
                "name": "bCoeffs",
                "type_name": "double[]",
                "description": "2nd set of coefficients that are multiplied with the input signal to produce the output signal in the given linear transformation.\n\n* `bCoeffs` has length `order`.\n* All elements of `bCoeffs` are non-zero.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n        IIRFilter filter = new IIRFilter(4);\n        double[] aCoeffs = {1, 2, 3, 4};\n        double[] bCoeffs = {1, 2, 3, 4};\n        filter.setCoeffs(aCoeffs, bCoeffs);\n    }\n",
              "description": ""
            },
            "name": "setCoeffs",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 18,
            "docLength": null
          },
          {
            "id": "c6e69892-30f6-6da6-2046-d64a314ba857",
            "ancestors": [
              "e787c5af-5e74-c7af-4b42-df7518d72e7b"
            ],
            "description": "Takes a sample value and processes it through an iterative feedback loop, using coefficients to compute the output value based on previous values of both inputs and outputs.",
            "params": [
              {
                "name": "sample",
                "type_name": "double",
                "description": "0-to-1 value that is processed by the function.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "double",
              "description": "a calculated value for the next time step in a feedback control system.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "IIRFilter filter = new IIRFilter(4);\nfilter.setCoeffs(new double[] {1, 2, 3, 4}, new double[] {5, 6, 7, 8});\ndouble sample = 10;\ndouble output = filter.process(sample);\nSystem.out.println(output); // Output: 94.0\n",
              "description": "\nThe example first initializes an IIRFilter object with a order of 4 and sets its coefficients using the setCoeffs method. It then defines a sample value of 10 and passes it to the process method to get an output value. The output is then printed to the console, resulting in a value of 94.0 being printed."
            },
            "name": "process",
            "location": {
              "start": 49,
              "insert": 49,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 20,
            "docLength": null
          }
        ]
      }
    }
  }
]